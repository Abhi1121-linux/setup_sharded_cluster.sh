set -euo pipefail

#!/bin/bash â†’ tells the system to use bash shell to run this script.


set -euo pipefail â†’ makes the script safer:


-e â†’ exit immediately if a command fails.


-u â†’ exit if you use an undefined variable.


-o pipefail â†’ makes pipelines fail if any command fails, not just the last one.


3. User-configurable variables

IP="localhost"
BASE_PATH="${HOME}/mongodb_cluster"
CONFIG_PORT=27021
MONGOS_PORT=27017

IP="localhost" â†’ cluster runs only locally.


BASE_PATH â†’ directory where all MongoDB data and logs are stored.


CONFIG_PORT=27021 â†’ port for the Config Server.


MONGOS_PORT=27017 â†’ port for the mongos router (the entry point).


4. Shard definitions
declare -A SHARDS
SHARDS=( ["shard1"]=27018 ["shard2"]=27019 ["shard3"]=27020 )

This creates an associative array in bash:
Key = shard name (shard1, shard2, shard3).


Value = port where each shard will run (27018, 27019, 27020).


5. Tool check

for TOOL in mongod mongos mongosh; do
	if ! command -v "${TOOL}" >/dev/null 2>&1; then
		echo "ERROR: ${TOOL} not found in PATH. Install MongoDB tools and retry." >&2
		exit 1
	fi
done


Loops over mongod, mongos, and mongosh.


command -v checks if tool is available.


If missing â†’ error and exit.
 âœ… This prevents half-broken setups.


6. Creating directories

echo "ðŸ“‚ Creating directories under ${BASE_PATH}..."
rm -rf "${BASE_PATH}" || true
mkdir -p "${BASE_PATH}/config"
for SH in "${!SHARDS[@]}"; do
    mkdir -p "${BASE_PATH}/${SH}"
done

Line by line:
echo "ðŸ“‚ Creating directories under ${BASE_PATH}..."
 â†’ Prints a message to let you know whatâ€™s happening.


rm -rf "${BASE_PATH}" || true
 â†’ Deletes the old cluster directory if it exists (rm -rf = force remove).
 â†’ || true ensures the script doesnâ€™t fail if the folder isnâ€™t there.


mkdir -p "${BASE_PATH}/config"
 â†’ Creates the config serverâ€™s data directory. (-p = no error if already exists).


The loop:
for SH in "${!SHARDS[@]}"; do
    mkdir -p "${BASE_PATH}/${SH}"
done

â†’ Iterates over shard names (shard1, shard2, shard3).
 â†’ Creates a data folder for each shard (e.g., /home/abhishek/mongodb_cluster/shard1).


âœ… At this point â†’ all directories for config + shards are ready.



7. Starting Config Server (Replica Set)

echo "ðŸ”¹ Starting config server (configReplSet) on ${IP}:${CONFIG_PORT}..."
mongod --configsvr --replSet configReplSet --port "${CONFIG_PORT}" \
      --dbpath "${BASE_PATH}/config" --bind_ip "${IP}" --fork \
      --logpath "${BASE_PATH}/config/mongod.log"


Line by line:
echo "ðŸ”¹ Starting config server ..."
 â†’ Prints status.


mongod â†’ starts a MongoDB server process.


Options explained:


--configsvr â†’ runs this mongod as a config server.


--replSet configReplSet â†’ makes it part of a replica set named configReplSet.


--port "${CONFIG_PORT}" â†’ listen on port 27021.


--dbpath "${BASE_PATH}/config" â†’ store data files here.


--bind_ip "${IP}" â†’ restrict connections (here localhost only).


--fork â†’ run in background.


--logpath "${BASE_PATH}/config/mongod.log" â†’ save logs.


âœ… This command starts the config server process in the background.


8. Initiating the Config Replica Set

sleep 2
echo "ðŸ”¸ Initiating config server replica set..."
mongosh --quiet --port "${CONFIG_PORT}" --eval "rs.initiate({_id:'configReplSet', configsvr:true, members:[{_id:0, host:'${IP}:${CONFIG_PORT}'}]});"

sleep 2 â†’ wait 2 seconds to ensure mongod is up.


mongosh --quiet --port "${CONFIG_PORT}" â†’ connect to the config server using mongosh.


--eval "rs.initiate(...)" â†’ run JavaScript inside mongosh:


rs.initiate() â†’ starts the replica set.


_id:'configReplSet' â†’ name of replica set.


configsvr:true â†’ mark it as a config server replica set.


members:[{_id:0, host:'localhost:27021'}] â†’ one-member replica set.




9. Checking Config Server Status


sleep 1
echo "ðŸ“ˆ config server rs.status():"
mongosh --quiet --port "${CONFIG_PORT}" --eval "printjson(rs.status())"


sleep 1 â†’ small wait for initiation.


Prints "ðŸ“ˆ config server rs.status():" â†’ just info text.


Runs printjson(rs.status()) inside mongosh:


Shows the replica setâ€™s health, state, election info, etc.



10. Start Shard Replica Sets (loop)

for SH in "${!SHARDS[@]}";do
	PORT=${SHARDS[$SH]}
	echo "ðŸ”¹ Starting shard ${SH} (replica set) on ${IP}:${PORT}..."
	mongod --shardsvr --replSet "${SH}" --port "${PORT}" \
		--dbpath "${BASE_PATH}/${SH}" --bind_ip "${IP}" --fork \
		--logpath "${BASE_PATH}/${SH}/mongod.log"
	sleep 2
	echo "ðŸ”¸ Initiating replica set for ${SH}..."
	mongosh --quiet --port "${PORT}" --eval "rs.initiate({_id:'${SH}', members:[{_id:0, host:'${IP}:${PORT}'}]});"
	sleep 1
	echo "ðŸ“ˆ ${SH} rs.status():"
	mongosh --quiet --port "${PORT}" --eval "printjson(rs.status())"
done


Line by line:
for SH in "${!SHARDS[@]}";do
 â†’ Loops through the keys in the SHARDS array (shard1, shard2, shard3).


PORT=${SHARDS[$SH]}
 â†’ Looks up the port number for this shard.
 Example: shard1=27018, shard2=27019, shard3=27020.


Step 1: Start shard mongod process
echo "ðŸ”¹ Starting shard ${SH} (replica set) on ${IP}:${PORT}..."
mongod --shardsvr --replSet "${SH}" --port "${PORT}" \
	--dbpath "${BASE_PATH}/${SH}" --bind_ip "${IP}" --fork \
	--logpath "${BASE_PATH}/${SH}/mongod.log"


Prints a message: "Starting shard shard1...".


mongod starts a MongoDB server instance.


Options explained:


--shardsvr â†’ mark it as a shard server (different from config server).


--replSet "${SH}" â†’ starts a replica set, named after the shard (shard1, etc.).


--port "${PORT}" â†’ use assigned port (e.g., 27018).


--dbpath "${BASE_PATH}/${SH}" â†’ store data in its folder.


--bind_ip "${IP}" â†’ only accept connections from localhost.


--fork â†’ run in background.


--logpath â†’ save logs.


âœ… This creates a standalone replica set shard server.




Step 2: Initiate Replica Set

sleep 2
echo "ðŸ”¸ Initiating replica set for ${SH}..."
mongosh --quiet --port "${PORT}" --eval "rs.initiate({_id:'${SH}', members:[{_id:0, host:'${IP}:${PORT}'}]});"

sleep 2 â†’ small wait before initiating.


Prints "Initiating replica set for shard1".


Connects with mongosh --port <PORT>.


Runs:
rs.initiate({
  _id: 'shard1',
  members: [
    { _id: 0, host: 'localhost:27018' }
  ]
});

This makes the shard a replica set (even if it only has 1 member).
Later you can add more members for redundancy.


Step 3: Check Replica Set Status

sleep 1
echo "ðŸ“ˆ ${SH} rs.status():"
mongosh --quiet --port "${PORT}" --eval "printjson(rs.status())"

sleep 1 â†’ wait a bit for replica set to be ready.


Prints "ðŸ“ˆ shard1 rs.status()".


Runs rs.status() inside mongosh to check health & election info.

âœ… After this loop â†’ all 3 shards (shard1, shard2, shard3) are up and initialized as replica sets.


11. Start Mongos Router

echo "ðŸ”¹ Starting mongos router (configdb=configReplSet/${IP}:${CONFIG_PORT}) on port ${MONGOS_PORT}..."
mongos --configdb configReplSet/"${IP}:${CONFIG_PORT}" --port "${MONGOS_PORT}" --bind_ip "${IP}" --fork --logpath "${BASE_PATH}/mongos.log"


Prints: "Starting mongos router...".


Starts a mongos process â†’ this is the query router.


Options explained:


--configdb configReplSet/${IP}:${CONFIG_PORT} â†’ tells mongos how to find the config server replica set.


--port "${MONGOS_PORT}" â†’ mongos listens on port 27017.


--bind_ip "${IP}" â†’ listen only on localhost.


--fork â†’ run in background.


--logpath â†’ save logs in mongos.log.


âœ… This is the entry point of the sharded cluster.
 Applications always connect to mongos, never directly to shards.


12. Add Shards to Cluster

sleep 3 

echo "ðŸ”¸ Adding shards to cluster via mongos..."
for SH in "${!SHARDS[@]}"; do
	PORT=${SHARDS[$SH]}
	echo "   -> Adding ${SH} at ${IP}:${PORT}"

	# add as replica-set qualified shard name: shardName/host:port
	mongosh --quiet --port "${MONGOS_PORT}" --eval "sh.addShard('${SH}/${IP}:${PORT}');"
done


sleep 3 â†’ wait for mongos to be ready.


Prints "Adding shards to cluster via mongos...".


Loops over all shards.


For each:
Prints: "-> Adding shard1 at localhost:27018".


Runs:
sh.addShard("shard1/localhost:27018")

This registers the shard with the cluster.


âœ… Now mongos knows about shard1, shard2, shard3 â†’ cluster is complete.


13. Final Setup Message

echo "ðŸŽ‰ MongoDB Sharded Cluster setup complete!"
echo "âž¡ Connect to mongos: mongosh --port ${MONGOS_PORT}"

Prints a celebration message âœ….


Tells you how to connect:

mongosh --port 27017

Since MONGOS_PORT=27017, thatâ€™s the entry point for clients.


14. Show Cluster Status (sh.status)

echo
echo "----- mongos sh.status() -----"
mongosh --quiet --port "${MONGOS_PORT}" --eval "sh.status();"


Adds a line break (echo with nothing).


Prints a heading: "----- mongos sh.status() -----".


Runs inside mongos:
sh.status()

This shows:


List of shards


Databases


Sharding/balancer info


Config server connection


Autosplit status


âœ… This is the main health check for the cluster.


15. Tail Logs for Each Shard

echo
echo "----- Tail last 20 lines of each mongod log -----"
for SH in "${!SHARDS[@]}"; do
	PORT=${SHARDS[$SH]}
	echo "---- ${SH} log (${BASE_PATH}/${SH}/mongod.log) ----"
	tail -n 20 "${BASE_PATH}/${SH}/mongod.log" || true
done


Prints a heading.


Loops through each shard (shard1, shard2, shard3).


For each shard:


Prints the log file location.


Runs tail -n 20 â†’ shows the last 20 lines of that shardâ€™s log.


|| true ensures the script doesnâ€™t exit if tail fails.


âœ… This helps you quickly see if there were errors or warnings.


16. Tail Config Server & Mongos Logs

echo "--- ${SH} log (${BASE_PATH}/${SH}/mongod.log) ----"
tail -n 20 "${BASE_PATH}/config/mongod.log" || true
echo "--- mongos log (${BASE_PATH}/mongos.log) ----"
tail -n 20 "${BASE_PATH}/mongos.log" || true

Prints and tails Config Server logs.


Prints and tails Mongos logs.


âœ… You get the latest info from every component:
Shards (3)


Config Server


Mongos Router


Summary of Script Flow
Check tools â†’ make sure mongod, mongos, mongosh are available.


Create directories for config server + shards.


Start Config Server + initiate replica set.


Start Shards (3 replica sets) + initiate each.


Start Mongos Router (entry point).


Register Shards with the cluster via sh.addShard().


Run checks (sh.status()) + tail logs for debugging


âœ… End result:
A fully working MongoDB Sharded Cluster (1 config server, 3 shards, 1 mongos router) running locally with logs ready for inspection.





